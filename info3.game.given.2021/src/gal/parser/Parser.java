/* Generated By:JavaCC: Do not edit this line. Parser.java */
package gal.parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import gal.ast.* ;
import gal.ast.export.*;
import gal.util.*;

public class Parser implements ParserConstants {

  public static AST from_file(String path_file) throws Exception
  {
    AST ast = new Parser(new BufferedReader(new FileReader(path_file))).parse();
    return ast;
  }

  public static boolean option(String option, String [] args)
  {
    int i = 0 ;
    while (i < args.length){
      if (args[i].equals(option)){ return true; }
      i++;
    }
    return false;
  }

  public static int index_of_option(String option, String[] args)
  {
    int i = 0 ;
    while (i < args.length) {
      if (args[i].equals(option)){ return i; }
      i++;
    }
    return -1;
  }

  public static void main(String[] args) throws Exception
  {
    AST ast;
    int i = index_of_option("-file", args) ;
    ast = from_file(args[i+1]) ;


    if ( option("-ast", args) ) {
      AstPrinter printer = new AstPrinter();
      ast.accept(printer);
      System.out.println("\u005cn// Exporting the AST of the parsed automata in .dot");
      System.out.println(printer.to_dot());
    }

    if ( option("-aut", args) ) {
      System.out.println("// Exporting the CFG of the parsed automata in .dot");
                        new AutPrinter(System.out, ast);
    }

    if ( option("-txt", args) ) {
      Ast2Gal printer = new Ast2Gal();
      ast.accept(printer);
      System.out.println("\u005cn// Exporting the reformatted SRC of the parsed automata in .txt");
      System.out.println(printer.export());
    }

        /*
        if ( option("-AST",args) ) {
          	ASTPrinter ast_printer = new ASTPrinter();
          	ast.accept(ast_printer);
            System.out.println("// THE AST of the PARSED AUTOMATA in DOT FORMAT \n");
            System.out.println(ast_printer.to_dot());
        }
        if ( option("-AUT",args) ) {         
            System.out.println("// THE AUTOMATA in DOT FORMAT \n"); 
			AutomataPrinter v = new AutomataPrinter();
			v.print(System.out, ast);
      	}
      	*/

        }

// == THE PARSER ==
  final public AST parse() throws ParseException {
  LinkedList<Automaton> automata = new LinkedList<Automaton>();
  Automaton aut;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
      case CONDITION:
      case ACTION:
      case DIRECTION:
      case CATEGORY:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      aut = pAutomaton();
                         automata.add(aut);
    }
    jj_consume_token(0);
      {if (true) return new AST(automata);}
    throw new Error("Missing return statement in function");
  }

// STATE 
  final public State pState() throws ParseException {
  String name ;
    jj_consume_token(25);
    name = pStateID();
    jj_consume_token(26);
          {if (true) return new State(name);}
    throw new Error("Missing return statement in function");
  }

  final public String pStateID() throws ParseException {
  String name ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEY:
    case CONDITION:
    case ACTION:
    case DIRECTION:
    case CATEGORY:
    case ID:
      name = pIdentifier();
      {if (true) return name;}
      break;
    case UNDERSCORE:
      jj_consume_token(UNDERSCORE);
      {if (true) return "_";}
      break;
    default:
      jj_la1[1] = jj_gen;
          {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

// AUTOMATON
  final public Automaton pAutomaton() throws ParseException {
  String name ;
  String entry_state ;
  LinkedList<Mode> modes = new LinkedList<Mode>();
  Mode mode;
    name = pIdentifier();
    jj_consume_token(25);
    entry_state = pIdentifier();
    jj_consume_token(26);
    jj_consume_token(27);
    label_2:
    while (true) {
      mode = pMode();
                     modes.add(mode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(28);
          {if (true) return new Automaton(name, new State(entry_state), modes) ;}
    throw new Error("Missing return statement in function");
  }

// MODE, BEHAVIOUR, TRANSITION 
  final public Mode pMode() throws ParseException {
  State state;
  Mode mode;
  Behaviour behaviour;
    jj_consume_token(29);
    state = pState();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    behaviour = pBehaviour();
          {if (true) return new Mode(state, behaviour) ;}
    throw new Error("Missing return statement in function");
  }

  final public Behaviour pBehaviour() throws ParseException {
  LinkedList<Transition> transitions = new LinkedList<Transition>();
  Transition t;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
      case CONDITION:
      case UNARY:
      case 25:
      case 31:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      t = pTransition();
                        transitions.add(t) ;
    }
          {if (true) return new Behaviour(transitions);}
    throw new Error("Missing return statement in function");
  }

  final public Transition pTransition() throws ParseException {
  Condition condition ;
  Actions actions = new Actions();
  State state ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    condition = pCondition();
    jj_consume_token(32);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACTION:
    case INTEGER:
      pActions(actions);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(30);
    state = pState();
          {if (true) return new Transition(condition, actions, state) ;}
    throw new Error("Missing return statement in function");
  }

// ACTIONS 
  final public void pActions(Actions actions) throws ParseException {
  FunCall action;
  String op = null;
    action = pProbabilisticAction();
                                    actions.add(action);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISJUNCTION:
      case SEQUENCE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      op = pActionOperator();
                                      actions.set(op);
      action = pProbabilisticAction();
                                      actions.add(action);
    }
  }

  final public String pActionOperator() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISJUNCTION:
      token = jj_consume_token(DISJUNCTION);
      break;
    case SEQUENCE:
      token = jj_consume_token(SEQUENCE);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  final public FunCall pProbabilisticAction() throws ParseException {
  int percent;
  Token action ;
  LinkedList<Parameter> parameters = new LinkedList<Parameter >();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      percent = pPercent();
      action = jj_consume_token(ACTION);
      parameters = pOptionalParameters();
          {if (true) return new FunCall(percent, action.image, parameters) ;}
      break;
    case ACTION:
      action = jj_consume_token(ACTION);
      parameters = pOptionalParameters();
          {if (true) return new FunCall(action.image, parameters) ;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int pPercent() throws ParseException {
  Token token ;
    token = jj_consume_token(INTEGER);
    jj_consume_token(33);
          {if (true) return Integer.parseInt(token.image);}
    throw new Error("Missing return statement in function");
  }

// CONDITION
  final public Condition pCondition() throws ParseException {
  Expression expr ;
    expr = pExpression();
            {if (true) return new Condition(expr) ;}
    throw new Error("Missing return statement in function");
  }

  final public Expression pExpression() throws ParseException {
  Expression e, expr ;
  Token token ;
  FunCall pred ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
      e = pExpression();
      jj_consume_token(26);
      expr = pBinop_Expression(e);
          {if (true) return expr ;}
      break;
    case UNARY:
      token = jj_consume_token(UNARY);
      expr = pExpression();
            {if (true) return new UnaryOp(token.image, expr) ;}
      break;
    case KEY:
    case CONDITION:
      pred = pPredicate();
      expr = pBinop_Expression(pred);
          {if (true) return expr ;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression pBinop_Expression(Expression e1) throws ParseException {
  Token token ;
  Expression e2 ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONJUNCTION:
    case DISJUNCTION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONJUNCTION:
        token = jj_consume_token(CONJUNCTION);
        break;
      case DISJUNCTION:
        token = jj_consume_token(DISJUNCTION);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = pExpression();
          {if (true) return new BinaryOp(token.image,e1,e2) ;}
      break;
    default:
      jj_la1[12] = jj_gen;
          {if (true) return e1 ;}
    }
    throw new Error("Missing return statement in function");
  }

  final public FunCall pPredicate() throws ParseException {
  Token token ;
  LinkedList<Parameter> parameters = new LinkedList<Parameter>() ;
  Key key ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEY:
      token = jj_consume_token(KEY);
      jj_consume_token(25);
      key = pKeyName();
      jj_consume_token(26);
          parameters.add(key) ;
      {if (true) return new FunCall(token.image, parameters) ;}
      break;
    case CONDITION:
      token = jj_consume_token(CONDITION);
      parameters = pOptionalParameters();
          {if (true) return new FunCall(token.image, parameters) ;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// PARAMETERS
  final public LinkedList<Parameter> pOptionalParameters() throws ParseException {
  LinkedList<Parameter> parameters = new LinkedList<Parameter>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIRVAR:
      case CATVAR:
      case DIRECTION:
      case CATEGORY:
      case UNDERSCORE:
      case INTEGER:
        pParameters(parameters);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(26);
      {if (true) return parameters;}
      break;
    default:
      jj_la1[15] = jj_gen;
      {if (true) return parameters;}
    }
    throw new Error("Missing return statement in function");
  }

  final public void pParameters(LinkedList<Parameter> parameters) throws ParseException {
  Parameter p;
    p = pParameter();
                     parameters.add(p);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(34);
      p = pParameter();
                       parameters.add(p);
    }
  }

  final public Parameter pParameter() throws ParseException {
  Token token ;
  Parameter parameter ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIRVAR:
    case DIRECTION:
      parameter = pDirection();
            {if (true) return parameter ;}
      break;
    case CATVAR:
    case CATEGORY:
    case UNDERSCORE:
      parameter = pCategory();
            {if (true) return parameter ;}
      break;
    case INTEGER:
      token = jj_consume_token(INTEGER);
            {if (true) return new Value(Integer.parseInt(token.image)) ;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// DIRECTION 	
  final public Direction pDirection() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIRECTION:
      token = jj_consume_token(DIRECTION);
      break;
    case DIRVAR:
      token = jj_consume_token(DIRVAR);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new Direction(new Terminal(token.image));}
    throw new Error("Missing return statement in function");
  }

// CATEGORY 
  final public Category pCategory() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATEGORY:
      token = jj_consume_token(CATEGORY);
      break;
    case CATVAR:
      token = jj_consume_token(CATVAR);
      break;
    case UNDERSCORE:
      token = jj_consume_token(UNDERSCORE);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new Category(new Terminal(token.image));}
    throw new Error("Missing return statement in function");
  }

// KEY NAME 
  final public Key pKeyName() throws ParseException {
  Token token ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      token = jj_consume_token(INTEGER);
      break;
    case DIRVAR:
    case CATVAR:
    case LOWERCASE:
      token = pLowercase();
      break;
    case SPECIAL_KEY:
      token = jj_consume_token(SPECIAL_KEY);
      break;
    case MOUSE:
      token = jj_consume_token(MOUSE);
      break;
    case UNDERSCORE:
      token = jj_consume_token(UNDERSCORE);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new Key(new Terminal(token.image)) ;}
    throw new Error("Missing return statement in function");
  }

// LOWERCASE  
  final public Token pLowercase() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOWERCASE:
      token = jj_consume_token(LOWERCASE);
      break;
    case DIRVAR:
      token = jj_consume_token(DIRVAR);
      break;
    case CATVAR:
      token = jj_consume_token(CATVAR);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

// IDENTIFIER
  final public String pIdentifier() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      token = jj_consume_token(ID);
      break;
    case ACTION:
      token = jj_consume_token(ACTION);
      break;
    case CONDITION:
      token = jj_consume_token(CONDITION);
      break;
    case KEY:
      token = jj_consume_token(KEY);
      break;
    case CATEGORY:
      token = jj_consume_token(CATEGORY);
      break;
    case DIRECTION:
      token = jj_consume_token(DIRECTION);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8018e0,0x8058e0,0x20000000,0x40000000,0x82080060,0x80000000,0x1000080,0x600000,0x600000,0x1000080,0x2080060,0x300000,0x300000,0x60,0x1005e00,0x2000000,0x0,0x1005e00,0xa00,0x5400,0x1016700,0x10600,0x8018e0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
