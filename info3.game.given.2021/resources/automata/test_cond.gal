Player1(Init){
* (Init):
| Key(a) ? Hit :(Init)
| Cell(H,P) ? Pick :(Picked)
| Cell(H,D) ? :(Init)
| Key(z) & (! Cell(N,O)) & (! Cell(N,#)) & (! Cell(N,@)) & (! Cell(N,C)) ? Turn(N) / Move :(Init)
| Key(d) & (! Cell(E,O)) & (! Cell(E,#)) & (! Cell(E,@)) & (! Cell(E,C)) ? Turn(E) / Move :(Init)
| Key(s) & (! Cell(S,O)) & (! Cell(S,#)) & (! Cell(S,@)) & (! Cell(S,C)) ? Turn(S) / Move :(Init)
| Key(q) & (! Cell(W,O)) & (! Cell(W,#)) & (! Cell(W,@)) & (! Cell(W,C)) ? Turn(W) / Move :(Init)
| Key(z) ? Turn(N) :(Init)
| Key(d) ? Turn(E) :(Init)
| Key(s) ? Turn(S) :(Init)
| Key(q) ? Turn(W) :(Init)
| Key(k) ? Egg :(Init)
| !Got(Power) ? Explode :()
* (Picked):
| Key(a) ? Hit :(Picked)
| Cell(H,D) ? :(Picked)
| Key(z) & (! Cell(N,O)) & (! Cell(N,#)) & (! Cell(N,@)) & (! Cell(N,C)) ? Turn(N) / Move :(Picked)
| Key(d) & (! Cell(E,O)) & (! Cell(E,#)) & (! Cell(E,@)) & (! Cell(E,C)) ? Turn(E) / Move :(Picked)
| Key(s) & (! Cell(S,O)) & (! Cell(S,#)) & (! Cell(S,@)) & (! Cell(S,C)) ? Turn(S) / Move :(Picked)
| Key(q) & (! Cell(W,O)) & (! Cell(W,#)) & (! Cell(W,@)) & (! Cell(W,C)) ? Turn(W) / Move :(Picked)
| Key(z) ? Turn(N) :(Picked)
| Key(d) ? Turn(E) :(Picked)
| Key(s) ? Turn(S) :(Picked)
| Key(q) ? Turn(W) :(Picked)
| Key(k) ? Egg :(Picked)
| !Got(Power) ? Explode :()
}

Player2(Init){
* (Init):
| Key(l) ? Hit :(Init)
| Key(o) ? Get :(Picked)
| Key(p) ? Jump :(Init)
| Cell(H,P) ? Pick :(Picked)
| Cell(H,D) ? :(Init)
| Key(FU) & (! Cell(N,O)) & (! Cell(N,#)) & (! Cell(N,@)) ? Turn(N) / Move :(Init)
| Key(FR) & (! Cell(E,O)) & (! Cell(E,#)) & (! Cell(E,@)) ? Turn(E) / Move :(Init)
| Key(FD) & (! Cell(S,O)) & (! Cell(S,#)) & (! Cell(S,@)) ? Turn(S) / Move :(Init)
| Key(FL) & (! Cell(W,O)) & (! Cell(W,#)) & (! Cell(W,@)) ? Turn(W) / Move :(Init)
| Key(FU) ? Turn(N) :(Init)
| Key(FR) ? Turn(E) :(Init)
| Key(FD) ? Turn(S) :(Init)
| Key(FL) ? Turn(W) :(Init)
| Key(j) ? Wizz :(Init)
| Key(k) ? Pop :(Wait)
* (Picked):
| Key(l) ? Hit :(Picked)
| Key(m) ? Throw :(Picked)
| Key(i) ? Store :(Init)
| Key(p) ? Jump :(Picked)
| Cell(H,D) ? :(Picked)
| Key(FU) & (! Cell(N,O)) & (! Cell(N,#)) & (! Cell(N,@)) ? Turn(N) / Move :(Picked)
| Key(FR) & (! Cell(E,O)) & (! Cell(E,#)) & (! Cell(E,@)) ? Turn(E) / Move :(Picked)
| Key(FD) & (! Cell(S,O)) & (! Cell(S,#)) & (! Cell(S,@)) ? Turn(S) / Move :(Picked)
| Key(FL) & (! Cell(W,O)) & (! Cell(W,#)) & (! Cell(W,@)) ? Turn(W) / Move :(Picked)
| Key(FU) ? Turn(N) :(Picked)
| Key(FR) ? Turn(E) :(Picked)
| Key(FD) ? Turn(S) :(Picked)
| Key(FL) ? Turn(W) :(Picked)
| Key(j) ? Wizz :(Picked)
| Key(k) ? Pop :(Wait)
}

Interrupteur(Init){
* (Init):
| Key(n) & (Cell(N,@) / Cell(S,@) / Cell(E,@) / Cell(W,@)) ? Pop :(Init)
| Key(b) & (Cell(N,#) / Cell(S,#) / Cell(E,#) / Cell(W,#)) ? Pop :(Init)
| Key(b) & (Cell(N,@) / Cell(S,@) / Cell(E,@) / Cell(W,@)) ? Wizz :(Init)
| Key(n) & (Cell(N,#) / Cell(S,#) / Cell(E,#) / Cell(W,#)) ? Wizz :(Init) 
}

Teleporteur(Init){
* (Init):
| Cell(H,@) / Cell(H,#) ? Jump :(Init)
| Cell(H, M) ? Pop :(NoJump)
| Cell(H, J) ? Wizz :(Init)
* (NoJump):
| Cell(H, M) ? Pop :(Init)
| Cell(H, J) ? Wizz :(NoJump)
}

Squelette(Init){
* (Init):
| ! Got(Power) ? Explode :()
| Cell(N, A) ? Turn(N) / Hit / Wait(20) :(Init)
| Cell(S, A) ? Turn(S) / Hit / Wait(20) :(Init)
| Cell(E, A) ? Turn(E) / Hit / Wait(20) :(Init)
| Cell(W, A) ? Turn(W) / Hit / Wait(20) :(Init)
| Closest(N, A) & (! Cell(N,O)) & (! Cell(N,#)) & (! Cell(N,@)) & (! Cell(N,C)) ? Turn(N) / Move :(Init)
| Closest(S, A) & (! Cell(S,O)) & (! Cell(S,#)) & (! Cell(S,@)) & (! Cell(S,C)) ? Turn(S) / Move :(Init)
| Closest(E, A) & (! Cell(E,O)) & (! Cell(E,#)) & (! Cell(E,@)) & (! Cell(E,C)) ? Turn(E) / Move :(Init)
| Closest(W, A) & (! Cell(W,O)) & (! Cell(W,#)) & (! Cell(W,@)) & (! Cell(W,C)) ? Turn(W) / Move :(Init)
| Cell(H, M) ? Pop :(Init)
| Cell(H, J) ? Wizz :(Allie)
| True ? :(Init)
* (Allie):
| !Got(Power) ? Explode :()
| Cell(H, M) ? Pop :(Init)
| Cell(H, J) ? Wizz :(Allie)
*()
}

Zombie(Init){
* (Init):
| ! Got(Power) ? Explode :()
| Cell(N, A) ? Turn(N) / Hit / Wait(20) :(Init)
| Cell(S, A) ? Turn(S) / Hit / Wait(20) :(Init)
| Cell(E, A) ? Turn(E) / Hit / Wait(20) :(Init)
| Cell(W, A) ? Turn(W) / Hit / Wait(20) :(Init)
| Closest(N, A) & (! Cell(N,O)) & (! Cell(N,#)) & (! Cell(N,@)) & (! Cell(N,C)) ? Turn(N) / Move :(Init)
| Closest(S, A) & (! Cell(S,O)) & (! Cell(S,#)) & (! Cell(S,@)) & (! Cell(S,C)) ? Turn(S) / Move :(Init)
| Closest(E, A) & (! Cell(E,O)) & (! Cell(E,#)) & (! Cell(E,@)) & (! Cell(E,C)) ? Turn(E) / Move :(Init)
| Closest(W, A) & (! Cell(W,O)) & (! Cell(W,#)) & (! Cell(W,@)) & (! Cell(W,C)) ? Turn(W) / Move :(Init)
| Cell(H, M) ? Pop :(Init)
| Cell(H, J) ? Wizz :(Allie)
* (Allie):
| !Got(Power) ? Explode :()
| Cell(H, M) ? Pop :(Init)
| Cell(H, J) ? Wizz :(Allie)
*()
}

Mine(Init){
* (Init):
| Cell(H,@) / Cell(H,#) / Cell(H,A) ? Explode : ()
}

Sable(Init){
* (Init):
| Cell(H, @) / Cell(H,#) ? Jump :(Catched)
| Cell(H, M) ? Pop :(Init)
| Cell(H, J) ? Wizz :()
*(Catched):
| Got(Power) ? Rest(1) : (Catched)
| ! Got(Power) ? Rest(25) / Pop :(Catched)
| Cell(H, M) ? Pop :(Catched)
| Cell(H, J) ? Wizz :()
 *()
}

Selection1(Init){
* (Init):
| Key(v) ? Pop :()
| Key(z) ? Turn(N) / Move :(Init)
| Key(d) ? Turn(E) / Move :(Init)
| Key(s) ? Turn(S) / Move :(Init)
| Key(q) ? Turn(W) / Move :(Init)
}

Selection2(Init){
* (Init):
| Key(v) ? Pop :()
| Key(FU) ? Turn(N) / Move :(Init)
| Key(FR) ? Turn(E) / Move :(Init)
| Key(FD) ? Turn(S) / Move :(Init)
| Key(FL) ? Turn(W) / Move :(Init)
}


