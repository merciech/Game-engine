Player1(Init){
* (Init):
| Key(a) ? Hit :(Init)
| Cell(H,P) & (! Got(Stuff))? Pick :(Init)
| Cell(H,D) ? :(Init)
| Key(z) & (! Cell(N,O)) & (! Cell(N,#)) & (! Cell(N,@)) & (! Cell(N,C)) ? Turn(N) / Move :(Init)
| Key(d) & (! Cell(E,O)) & (! Cell(E,#)) & (! Cell(E,@)) & (! Cell(E,C)) ? Turn(E) / Move :(Init)
| Key(s) & (! Cell(S,O)) & (! Cell(S,#)) & (! Cell(S,@)) & (! Cell(S,C)) ? Turn(S) / Move :(Init)
| Key(q) & (! Cell(W,O)) & (! Cell(W,#)) & (! Cell(W,@)) & (! Cell(W,C)) ? Turn(W) / Move :(Init)
| Key(z) ? Turn(N) :(Init)
| Key(d) ? Turn(E) :(Init)
| Key(s) ? Turn(S) :(Init)
| Key(q) ? Turn(W) :(Init)
| Key(k) ? Egg :(Init)
| !Got(Power) ? Explode :()
}

Player2(Init){
* (Init):
| Key(l) ? Hit :(Init)
| Key(m) ? Throw :(Init)
| Key(i) ? Store :(Init)
| Key(o) ? Get :(Init)
| Key(p) ? Jump :(Init)
| Cell(H,P) ? Pick :(Init)
| Cell(H,D) ? :(Init)
| Key(FU) & (! Cell(N,O)) & (! Cell(N,#)) & (! Cell(N,@)) & (! Cell(N,C)) ? Turn(N) / Move :(Init)
| Key(FR) & (! Cell(E,O)) & (! Cell(E,#)) & (! Cell(E,@)) & (! Cell(E,C)) ? Turn(E) / Move :(Init)
| Key(FD) & (! Cell(S,O)) & (! Cell(S,#)) & (! Cell(S,@)) & (! Cell(S,C)) ? Turn(S) / Move :(Init)
| Key(FL) & (! Cell(W,O)) & (! Cell(W,#)) & (! Cell(W,@)) & (! Cell(W,C)) ? Turn(W) / Move :(Init)
| Key(FU) ? Turn(N) :(Init)
| Key(FR) ? Turn(E) :(Init)
| Key(FD) ? Turn(S) :(Init)
| Key(FL) ? Turn(W) :(Init)
| Key(o) ? Wizz :(Init)
| Key(k) ? Egg :(Init)
}

Mine(Init){
* (Init):
| Cell(H,@) / Cell(H,#) / Cell(H,A) ? Explode : ()
}

Zombie(Init){
* (Init):
| !Got(Power) ? Explode :()
}

Squelette(Init){
* (Init):
| !Got(Power) ? Explode :()
}

Teleporteur(Init){
* (Init):
| Cell(H,@) / Cell(H,#) ? Jump :(Init)
| Key(v) & (Cell(N,@) / Cell(S,@) / Cell(E,@) / Cell(W,@)) ? Pop :(Init)
| Key(v) & (Cell(N,#) / Cell(S,#) / Cell(E,#) / Cell(W,#)) ? Pop :(Init)
| Key(b) & (Cell(N,@) / Cell(S,@) / Cell(E,@) / Cell(W,@)) ? Wizz :(Init)
| Key(b) & (Cell(N,#) / Cell(S,#) / Cell(E,#) / Cell(W,#)) ? Wizz :(Init)
}

Interrupteur(Init){
* (Init):
| Key(n) & (Cell(N,@) / Cell(S,@) / Cell(E,@) / Cell(W,@)) ? Pop :(Init)
| Key(b) & (Cell(N,#) / Cell(S,#) / Cell(E,#) / Cell(W,#)) ? Pop :(Init)
| Key(b) & (Cell(N,@) / Cell(S,@) / Cell(E,@) / Cell(W,@)) ? Wizz :(Init)
| Key(n) & (Cell(N,#) / Cell(S,#) / Cell(E,#) / Cell(W,#)) ? Wizz :(Init) 
}

Sable(Init){
* (Init):
| Cell(H, @) / Cell(H,#) ? Pop :(Wait)
* (Wait):
| !(Cell(H,@) / Cell(H,#)) ? Wizz :(Init) 
}
